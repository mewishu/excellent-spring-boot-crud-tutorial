<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.excellentcoder.tutorial.common.dal.mapper.manual.ManualRoleDOMapper">

  <resultMap id="BaseResultMap" type="org.excellentcoder.tutorial.common.dal.dataobject.RoleDO">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
  </resultMap>

  <!-- 多对多:
    一、通过collection实现: 对应于注解中的@Many
    在ResultMap中进行嵌套结果集，然后在对应的sql中通过join实现

   -->
  <resultMap id="RoleResultMap" type="org.excellentcoder.tutorial.common.dal.dataobject.RoleDO" extends="BaseResultMap">
    <!-- 关联引用: UserResultMap -->
    <collection property="users" ofType="org.excellentcoder.tutorial.common.dal.dataobject.UserDO" javaType="java.util.Set">
    <id column="u_id" jdbcType="BIGINT" property="id" />
      <result column="u_name" jdbcType="VARCHAR" property="name" />
      <result column="u_username" jdbcType="VARCHAR" property="username" />
      <result column="u_email" jdbcType="VARCHAR" property="email" />
      <result column="u_password" jdbcType="VARCHAR" property="password" />
      <result column="u_gmt_create" jdbcType="TIMESTAMP" property="gmtCreate" />
      <result column="u_gmt_modified" jdbcType="TIMESTAMP" property="gmtModified" />
    </collection>
  </resultMap>

  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>

  <!-- 根据roles表信息动态查询角色及对应的用户信息 -->
  <select id="selectByExample" parameterType="org.excellentcoder.tutorial.common.dal.dataobject.RoleDOExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'false' as QUERYID,
      r.id, r.name,
      u.id as u_id
      u.name as u_name,
      u.username as u_username,
      u.email as u_email,
      u.password as u_password,
      u.gmt_create as u_gmt_create,
      u.gmt_modified as u_gmt_modified
    from roles r
      left join user_roles ur on r.id = ur.role_id
      left join users u on ur.user_id = u.id
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>

  <!-- 根据roles表信息的主键查询角色及对应的用户信息 -->
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
      r.id, r.name,
      u.id as u_id
      u.name as u_name,
      u.username as u_username,
      u.email as u_email,
      u.password as u_password,
      u.gmt_create as u_gmt_create,
      u.gmt_modified as u_gmt_modified
    from roles r
      left join user_roles ur on r.id = ur.role_id
      left join users u on ur.user_id = u.id
    where id = #{id,jdbcType=BIGINT}
  </select>

  <!-- 删除用户和角色之间的关系信息 -->
  <delete id="deleteRoleUserLink" parameterType="org.excellentcoder.tutorial.common.dal.dataobject.UserRolesLinkDO">
    delete from user_roles
    <trim prefix="WHERE" prefixOverrides="AND |OR ">
      <if test="user_id != 0">
        user_id = #{userDO.id,jdbcType=BIGINT}
      </if>
      <if test="role_id != 0">
        and role_id = #{roleDO.id,jdbcType=BIGINT}
      </if>
    </trim>
  </delete>

  <!-- 插入角色和用户之间的关系信息 -->
  <insert id="insertRoleUserLink" parameterType="org.excellentcoder.tutorial.common.dal.dataobject.UserRolesLinkDO">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into user_roles (name)
    values (#{userDO.id,jdbcType=BIGINT}, #{roleDO.id,jdbcType=BIGINT})
  </insert>

</mapper>